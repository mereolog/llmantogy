
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFFleftIFAND COMMENT EXISTS FORALL IF IFF LPAREN NAME_STRING NONLOGICAL NOT OR QUOTED_STRING RPAREN SET URI\n    statement : axiom statement\n    statement : axiom\n    \n    axiom : negation\n          | universal\n          | existential\n          | conjunction\n          | disjunction\n          | implication\n          | biconditional\n          | predicate\n    \n    base_axiom : negation\n        | universal\n        | existential\n        | conjunction\n        | disjunction\n        | implication\n        | biconditional\n        | predicate\n    \n    negation : LPAREN NOT axiom RPAREN\n    \n    conjunction : LPAREN AND axiom_list RPAREN\n    \n    conjunction : LPAREN AND error\n    \n    disjunction : LPAREN OR axiom_list RPAREN\n    \n    disjunction : LPAREN OR error\n    \n    axiom_list : axiom axiom_list\n    axiom_list : axiom\n    \n    implication : LPAREN IF axiom axiom RPAREN\n    \n    implication : LPAREN IF error\n    implication : LPAREN IF axiom error\n    \n    biconditional : LPAREN IFF axiom axiom RPAREN\n    \n    biconditional : LPAREN IFF error\n    biconditional : LPAREN IFF axiom error\n    \n    existential : LPAREN EXISTS LPAREN nonlogicals RPAREN axiom RPAREN\n    \n    existential : LPAREN EXISTS LPAREN error\n    existential : LPAREN EXISTS LPAREN nonlogicals RPAREN error\n    \n    universal : LPAREN FORALL LPAREN nonlogicals RPAREN axiom RPAREN\n    \n    universal : LPAREN FORALL LPAREN nonlogicals RPAREN error axiom RPAREN\n              | LPAREN FORALL LPAREN nonlogicals RPAREN error RPAREN\n              | LPAREN FORALL LPAREN nonlogicals RPAREN axiom error RPAREN\n              | LPAREN FORALL error LPAREN nonlogicals RPAREN error axiom RPAREN\n    \n    predicate : LPAREN NONLOGICAL parameter RPAREN\n    predicate : LPAREN NAME_STRING parameter RPAREN\n    predicate : LPAREN SET parameter RPAREN\n    \n    predicate : LPAREN NONLOGICAL error RPAREN\n    \n    parameter : function parameter\n    parameter : nonlogicals parameter\n    parameter : function\n    parameter : nonlogicals\n    \n    function : LPAREN NONLOGICAL parameter RPAREN\n    \n    function : LPAREN NONLOGICAL error RPAREN\n    \n    nonlogicals : NONLOGICAL nonlogicals\n    nonlogicals : NONLOGICAL\n    '
    
_lr_action_items = {'LPAREN':([0,2,3,4,5,6,7,8,9,10,13,14,15,16,17,18,19,20,21,22,25,28,29,31,32,33,34,35,37,40,41,44,48,49,51,53,55,56,57,58,59,62,63,64,66,67,68,72,75,76,77,78,80,82,83,84,85,87,],[11,11,-3,-4,-5,-6,-7,-8,-9,-10,11,24,26,11,11,11,11,36,36,36,46,-21,11,-23,11,-27,11,-30,-51,36,36,-19,-33,-20,-22,-28,-31,36,-50,-40,-43,-41,-42,11,11,-26,-29,11,-34,-48,-49,-35,-37,11,-32,-38,-36,-39,]),'$end':([1,2,3,4,5,6,7,8,9,10,12,28,31,33,35,44,48,49,51,53,55,58,59,62,63,67,68,75,78,80,83,84,85,87,],[0,-2,-3,-4,-5,-6,-7,-8,-9,-10,-1,-21,-23,-27,-30,-19,-33,-20,-22,-28,-31,-40,-43,-41,-42,-26,-29,-34,-35,-37,-32,-38,-36,-39,]),'RPAREN':([3,4,5,6,7,8,9,10,23,27,28,29,30,31,33,35,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,63,65,67,68,69,70,71,72,74,75,76,77,78,79,80,81,83,84,85,86,87,],[-3,-4,-5,-6,-7,-8,-9,-10,44,49,-21,-25,51,-23,-27,-30,-51,58,59,-46,-47,62,63,-19,64,66,-33,-20,-24,-22,67,-28,68,-31,-50,-40,-43,-44,-45,-41,-42,73,-26,-29,76,77,78,80,83,-34,-48,-49,-35,84,-37,85,-32,-38,-36,87,-39,]),'error':([3,4,5,6,7,8,9,10,14,16,17,18,19,20,26,28,31,32,33,34,35,44,48,49,51,53,55,56,58,59,62,63,64,66,67,68,71,73,75,78,80,83,84,85,87,],[-3,-4,-5,-6,-7,-8,-9,-10,25,28,31,33,35,39,48,-21,-23,53,-27,55,-30,-19,-33,-20,-22,-28,-31,70,-40,-43,-41,-42,72,75,-26,-29,79,82,-34,-35,-37,-32,-38,-36,-39,]),'NOT':([11,],[13,]),'FORALL':([11,],[14,]),'EXISTS':([11,],[15,]),'AND':([11,],[16,]),'OR':([11,],[17,]),'IF':([11,],[18,]),'IFF':([11,],[19,]),'NONLOGICAL':([11,20,21,22,24,26,36,37,40,41,46,56,57,76,77,],[20,37,37,37,37,37,56,37,37,37,37,37,-50,-48,-49,]),'NAME_STRING':([11,],[21,]),'SET':([11,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,2,],[1,12,]),'axiom':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[2,2,23,29,29,32,34,29,52,54,71,74,81,86,]),'negation':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[3,3,3,3,3,3,3,3,3,3,3,3,3,3,]),'universal':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'existential':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'conjunction':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'disjunction':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'implication':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'biconditional':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'predicate':([0,2,13,16,17,18,19,29,32,34,64,66,72,82,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'axiom_list':([16,17,29,],[27,30,50,]),'parameter':([20,21,22,40,41,56,],[38,42,43,60,61,69,]),'function':([20,21,22,40,41,56,],[40,40,40,40,40,40,]),'nonlogicals':([20,21,22,24,26,37,40,41,46,56,],[41,41,41,45,47,57,41,41,65,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> axiom statement','statement',2,'p_statement','macleod_parser.py',98),
  ('statement -> axiom','statement',1,'p_statement','macleod_parser.py',99),
  ('axiom -> negation','axiom',1,'p_axiom','macleod_parser.py',120),
  ('axiom -> universal','axiom',1,'p_axiom','macleod_parser.py',121),
  ('axiom -> existential','axiom',1,'p_axiom','macleod_parser.py',122),
  ('axiom -> conjunction','axiom',1,'p_axiom','macleod_parser.py',123),
  ('axiom -> disjunction','axiom',1,'p_axiom','macleod_parser.py',124),
  ('axiom -> implication','axiom',1,'p_axiom','macleod_parser.py',125),
  ('axiom -> biconditional','axiom',1,'p_axiom','macleod_parser.py',126),
  ('axiom -> predicate','axiom',1,'p_axiom','macleod_parser.py',127),
  ('base_axiom -> negation','base_axiom',1,'p_base_axiom','macleod_parser.py',135),
  ('base_axiom -> universal','base_axiom',1,'p_base_axiom','macleod_parser.py',136),
  ('base_axiom -> existential','base_axiom',1,'p_base_axiom','macleod_parser.py',137),
  ('base_axiom -> conjunction','base_axiom',1,'p_base_axiom','macleod_parser.py',138),
  ('base_axiom -> disjunction','base_axiom',1,'p_base_axiom','macleod_parser.py',139),
  ('base_axiom -> implication','base_axiom',1,'p_base_axiom','macleod_parser.py',140),
  ('base_axiom -> biconditional','base_axiom',1,'p_base_axiom','macleod_parser.py',141),
  ('base_axiom -> predicate','base_axiom',1,'p_base_axiom','macleod_parser.py',142),
  ('negation -> LPAREN NOT axiom RPAREN','negation',4,'p_negation','macleod_parser.py',150),
  ('conjunction -> LPAREN AND axiom_list RPAREN','conjunction',4,'p_conjunction','macleod_parser.py',158),
  ('conjunction -> LPAREN AND error','conjunction',3,'p_conjunction_error','macleod_parser.py',166),
  ('disjunction -> LPAREN OR axiom_list RPAREN','disjunction',4,'p_disjunction','macleod_parser.py',174),
  ('disjunction -> LPAREN OR error','disjunction',3,'p_disjunction_error','macleod_parser.py',182),
  ('axiom_list -> axiom axiom_list','axiom_list',2,'p_axiom_list','macleod_parser.py',190),
  ('axiom_list -> axiom','axiom_list',1,'p_axiom_list','macleod_parser.py',191),
  ('implication -> LPAREN IF axiom axiom RPAREN','implication',5,'p_implication','macleod_parser.py',212),
  ('implication -> LPAREN IF error','implication',3,'p_implication_error','macleod_parser.py',219),
  ('implication -> LPAREN IF axiom error','implication',4,'p_implication_error','macleod_parser.py',220),
  ('biconditional -> LPAREN IFF axiom axiom RPAREN','biconditional',5,'p_biconditional','macleod_parser.py',231),
  ('biconditional -> LPAREN IFF error','biconditional',3,'p_biconditional_error','macleod_parser.py',242),
  ('biconditional -> LPAREN IFF axiom error','biconditional',4,'p_biconditional_error','macleod_parser.py',243),
  ('existential -> LPAREN EXISTS LPAREN nonlogicals RPAREN axiom RPAREN','existential',7,'p_existential','macleod_parser.py',254),
  ('existential -> LPAREN EXISTS LPAREN error','existential',4,'p_existential_error','macleod_parser.py',262),
  ('existential -> LPAREN EXISTS LPAREN nonlogicals RPAREN error','existential',6,'p_existential_error','macleod_parser.py',263),
  ('universal -> LPAREN FORALL LPAREN nonlogicals RPAREN axiom RPAREN','universal',7,'p_universal','macleod_parser.py',274),
  ('universal -> LPAREN FORALL LPAREN nonlogicals RPAREN error axiom RPAREN','universal',8,'p_universal_error','macleod_parser.py',282),
  ('universal -> LPAREN FORALL LPAREN nonlogicals RPAREN error RPAREN','universal',7,'p_universal_error','macleod_parser.py',283),
  ('universal -> LPAREN FORALL LPAREN nonlogicals RPAREN axiom error RPAREN','universal',8,'p_universal_error','macleod_parser.py',284),
  ('universal -> LPAREN FORALL error LPAREN nonlogicals RPAREN error axiom RPAREN','universal',9,'p_universal_error','macleod_parser.py',285),
  ('predicate -> LPAREN NONLOGICAL parameter RPAREN','predicate',4,'p_predicate','macleod_parser.py',294),
  ('predicate -> LPAREN NAME_STRING parameter RPAREN','predicate',4,'p_predicate','macleod_parser.py',295),
  ('predicate -> LPAREN SET parameter RPAREN','predicate',4,'p_predicate','macleod_parser.py',296),
  ('predicate -> LPAREN NONLOGICAL error RPAREN','predicate',4,'p_predicate_error','macleod_parser.py',304),
  ('parameter -> function parameter','parameter',2,'p_parameter','macleod_parser.py',312),
  ('parameter -> nonlogicals parameter','parameter',2,'p_parameter','macleod_parser.py',313),
  ('parameter -> function','parameter',1,'p_parameter','macleod_parser.py',314),
  ('parameter -> nonlogicals','parameter',1,'p_parameter','macleod_parser.py',315),
  ('function -> LPAREN NONLOGICAL parameter RPAREN','function',4,'p_function','macleod_parser.py',344),
  ('function -> LPAREN NONLOGICAL error RPAREN','function',4,'p_function_error','macleod_parser.py',352),
  ('nonlogicals -> NONLOGICAL nonlogicals','nonlogicals',2,'p_nonlogicals','macleod_parser.py',360),
  ('nonlogicals -> NONLOGICAL','nonlogicals',1,'p_nonlogicals','macleod_parser.py',361),
]
